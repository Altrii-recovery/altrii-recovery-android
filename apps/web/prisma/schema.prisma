generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  emailVerified    DateTime?
  passwordHash     String?
  name             String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  stripeCustomerId String?  @unique

  // Relations
  devices          Device[]
  subscriptions    Subscription[]
  accounts         Account[]
  sessions         Session[]
}

model Device {
  id           String         @id @default(cuid())
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  platform     Platform
  name         String
  registeredAt DateTime       @default(now())
  lastSeenAt   DateTime?
  lockUntil    DateTime?
  settings     DeviceSettings?
}

enum Platform {
  ANDROID
  IOS
  MACOS
  WINDOWS
}

model DeviceSettings {
  id            String   @id @default(cuid())
  device        Device   @relation(fields: [deviceId], references: [id])
  deviceId      String   @unique
  blockAdult    Boolean  @default(true)
  blockGambling Boolean  @default(true)
  blockSocial   Boolean  @default(false)
  blockYouTube  Boolean  @default(false)
  blockVPN      Boolean  @default(true)
  rulesVersion  Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Subscription {
  id               String    @id @default(cuid())
  user             User      @relation(fields: [userId], references: [id])
  userId           String
  stripeSubId      String    @unique
  plan             Plan
  status           SubStatus
  currentPeriodEnd DateTime
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

enum Plan {
  MONTHLY
  QUARTERLY
  SEMIANNUAL
  ANNUAL
}

enum SubStatus {
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

//// -------- NextAuth (Auth.js) tables --------

model Account {
  id                 String  @id @default(cuid())
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
